{
  "language": "Solidity",
  "sources": {
    "contracts/BuyMeACoffee.sol": {
      "content": "// Layout of Contract:\r\n// version\r\n// imports\r\n// errors\r\n// interfaces, libraries, contracts\r\n// Type declarations\r\n// State variables\r\n// Events\r\n// Modifiers\r\n// Functions\r\n\r\n// Layout of Functions:\r\n// constructor\r\n// receive function (if exists)\r\n// fallback function (if exists)\r\n// external\r\n// public\r\n// internal\r\n// private\r\n// internal & private view & pure functions\r\n// external & public view & pure functions\r\n// SPDX-License-Identifier: UNLICENSED\r\n// Pragma\r\npragma solidity ^0.8.19;\r\n\r\n// Error\r\nerror BuyMeACoffe__SignedUpBefore();\r\nerror BuyMeACoffe__NotSignedUpBefore();\r\nerror BuyMeACoffe__BalanceIsZero();\r\nerror BuyMeACoffe__OnlyOwner();\r\nerror BuyMeACoffe__ValueMustBeMoreThanOneGwei();\r\nerror BuyMeACoffe__TransferFaild();\r\n\r\n/**@title BuyMeACoffee contract\r\n * @author mohammad norouzi\r\n * @notice This contract implements the BuyMeACoffee contract and its functionality as simple as possible\r\n */\r\ncontract BuyMeACoffee {\r\n    ///////////\r\n    // types //\r\n    ///////////\r\n\r\n    struct User {\r\n        address userAddress;\r\n        uint256 userBalance;\r\n        Memo lastMemo;\r\n    }\r\n    struct Memo {\r\n        address from;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        string name;\r\n        string message;\r\n    }\r\n\r\n    /////////////////////\r\n    // State variables //\r\n    /////////////////////\r\n\r\n    /// @dev set a minimum amount for coffe price\r\n    uint256 private constant MINIMUN_COFFEE_PRICE = 1e9;\r\n    /// @dev Mapping of address to users struct\r\n    mapping(address => User) private s_users;\r\n\r\n    ////////////\r\n    // events //\r\n    ////////////\r\n\r\n    event SingUpEvent(address indexed from, uint256 timestamp);\r\n\r\n    event MemoEvent(\r\n        address indexed to,\r\n        address indexed from,\r\n        uint256 indexed timestamp,\r\n        uint256 amount,\r\n        string name,\r\n        string message\r\n    );\r\n\r\n    ///////////////\r\n    // modifiers //\r\n    ///////////////\r\n\r\n    modifier isUserExist(address _address) {\r\n        // read accounts address as currentAddress from storage\r\n        address currentAddress = _getUser(_address);\r\n        // check if the _address is already signed up\r\n        if (currentAddress == address(0)) {\r\n            revert BuyMeACoffe__NotSignedUpBefore();\r\n        }\r\n        _;\r\n    }\r\n\r\n    ///////////////\r\n    // functions //\r\n    ///////////////\r\n\r\n    /*\r\n     * @notice This function will sing up the new user and emit a event\r\n     */\r\n\r\n    function singUp() external {\r\n        // check if the account is already signed up revert an error\r\n        address currentAddress = _getUser(msg.sender);\r\n        if (currentAddress != address(0)) {\r\n            revert BuyMeACoffe__SignedUpBefore();\r\n        }\r\n\r\n        // create a new User and save it in the state\r\n        User memory newUser = User(msg.sender, 0, _createMemo(\"\", \"\", 0));\r\n        s_users[msg.sender] = newUser;\r\n\r\n        // emit the a event\r\n        emit SingUpEvent(msg.sender, block.timestamp);\r\n    }\r\n\r\n    function buyACoffee(\r\n        string memory name,\r\n        string memory message,\r\n        address to\r\n    ) external payable isUserExist(to) {\r\n        // check if msg.value is less than MINIMUN_COFFEE_PRICE revert an error\r\n        if (msg.value < MINIMUN_COFFEE_PRICE)\r\n            revert BuyMeACoffe__ValueMustBeMoreThanOneGwei();\r\n\r\n        // updata user balance\r\n        s_users[to].userBalance += msg.value;\r\n        s_users[to].lastMemo = _createMemo(name, message, msg.value);\r\n\r\n        // emit an event\r\n        emit MemoEvent(\r\n            to,\r\n            msg.sender,\r\n            block.timestamp,\r\n            msg.value,\r\n            name,\r\n            message\r\n        );\r\n    }\r\n\r\n    function withdraw() external payable isUserExist(msg.sender) {\r\n        // check if balance of the contract is zero trwo an error\r\n        if (s_users[msg.sender].userBalance == 0)\r\n            revert BuyMeACoffe__BalanceIsZero();\r\n\r\n        bool isSuccessful = payable(msg.sender).send(\r\n            s_users[msg.sender].userBalance\r\n        );\r\n\r\n        if (!isSuccessful) revert BuyMeACoffe__TransferFaild();\r\n    }\r\n\r\n    function _getUser(address _address) internal view returns (address) {\r\n        return s_users[_address].userAddress;\r\n    }\r\n\r\n    function _createMemo(\r\n        string memory name,\r\n        string memory message,\r\n        uint256 amount\r\n    ) internal view returns (Memo memory) {\r\n        Memo memory newMemo = Memo(\r\n            msg.sender,\r\n            block.timestamp,\r\n            amount,\r\n            name,\r\n            message\r\n        );\r\n        return newMemo;\r\n    }\r\n\r\n    function getBalance()\r\n        external\r\n        view\r\n        isUserExist(msg.sender)\r\n        returns (uint256)\r\n    {\r\n        return s_users[msg.sender].userBalance;\r\n    }\r\n\r\n    function getLastMemo()\r\n        external\r\n        view\r\n        isUserExist(msg.sender)\r\n        returns (Memo memory)\r\n    {\r\n        return s_users[msg.sender].lastMemo;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}